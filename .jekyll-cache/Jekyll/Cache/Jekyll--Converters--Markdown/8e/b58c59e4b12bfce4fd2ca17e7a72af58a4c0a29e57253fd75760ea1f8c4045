I".6<p>지난 포스팅을 통해 <code class="language-plaintext highlighter-rouge">Observable</code>을 알아보았으니 <code class="language-plaintext highlighter-rouge">Observable</code>의 이벤트를 처리할 수 있는 다양한 연산자 중, 생성 Operator(연산자)를 알아보도록 하자.<br />
<br /></p>

<h2 id="0-subscribe">0. Subscribe</h2>
<p>일단 operator들을 알아보기 전 subscribe(구독)에 대해 알 필요가 있다.<br />
<br />
Rx를 사용할 때, Observable이 어떠한 이벤트를 내보낸다는 것은 어떻게 알까?<br />
<br />
Observable는 실제로는 sequence 정의일 뿐이며 subscribe 되기 전에는 어떠한 이벤트도 내보내지 않는다.<br />
<br />
따라서 실제로 잘 작동하는지 확인하기 위해선 반드시 subscribe 해야하는 것을 명심하도록 하자.<br />
<br /></p>

<h2 id="1-just">1. Just</h2>
<p><code class="language-plaintext highlighter-rouge">just</code>는 단 하나의 element만 방출시키는 연산자이다.<br /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">Int</span><span class="o">&gt;.</span><span class="nf">just</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
    <span class="p">})</span>

<span class="cp">#=&gt;	prints 1    </span></code></pre></figure>

<h2 id="2-of">2. Of</h2>
<p><code class="language-plaintext highlighter-rouge">of</code>는 여러개의 element를 방출시키는 연산자이다.<br /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">Int</span><span class="o">&gt;.</span><span class="nf">of</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
    <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
    <span class="p">})</span>

<span class="cp">#=&gt;	prints 1</span>
<span class="cp">#=&gt;	prints 2</span>
<span class="cp">#=&gt;	prints 3</span>
<span class="cp">#=&gt;	prints 4</span>
<span class="cp">#=&gt;	prints 5    </span></code></pre></figure>

<p>쉼표를 기준으로 element를 하나씩 방출한다.<br />
<br />
여러개의 element를 방출하지만 array타입의 element는 array형태 그대로 방출한다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">Int</span><span class="o">&gt;.</span><span class="nf">of</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
    <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
    <span class="p">})</span>

<span class="cp">#=&gt;	prints [1, 2, 3, 4, 5]    </span></code></pre></figure>

<h2 id="3-from">3. From</h2>
<p><code class="language-plaintext highlighter-rouge">from</code>은 바로 위에서 다룬 <code class="language-plaintext highlighter-rouge">of</code>연산자와 유사하게 여러개의 element를 방출하지만 array형태의 element만 받으며 해당 array의 요소들을 하나씩 방출한다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">Int</span><span class="o">&gt;.</span><span class="nf">from</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
    <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
    <span class="p">})</span>

<span class="cp">#=&gt;	prints 1</span>
<span class="cp">#=&gt;	prints 2</span>
<span class="cp">#=&gt;	prints 3</span>
<span class="cp">#=&gt;	prints 4</span>
<span class="cp">#=&gt;	prints 5    </span></code></pre></figure>

<h2 id="4-empty">4. empty</h2>
<p><code class="language-plaintext highlighter-rouge">empty</code>는 아무런 element를 방출하지 않는다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kt">Observable</span><span class="o">.</span><span class="nf">empty</span><span class="p">()</span>
    <span class="o">.</span><span class="n">subscribe</span><span class="p">{</span>
      <span class="nf">print</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
    <span class="p">}</span>

<span class="cp">#=&gt;	no prints</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">empty</code>는 element도 없고 이벤트도 없는 <code class="language-plaintext highlighter-rouge">Observable</code>을 만들때 사용된다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">Void</span><span class="o">&gt;.</span><span class="nf">empty</span><span class="p">()</span>
    <span class="o">.</span><span class="n">subscribe</span><span class="p">{</span>
      <span class="nf">print</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
    <span class="p">}</span>

<span class="cp">#=&gt;	prints completed</span></code></pre></figure>

<p>하지만 <code class="language-plaintext highlighter-rouge">Void</code>타입으로 선언한 뒤에 구독을 하면 completed가 출력된다. 왜그럴까?<br />
<br />
첫번째 예문은 타입선언이 없었기 때문에 <code class="language-plaintext highlighter-rouge">empty</code>를 통해 타입추론이 불가능해 어떠한 이벤트도 발생하지 않는다.<br />
<br />
하지만 <code class="language-plaintext highlighter-rouge">Void</code>타입을 선언한 뒤 구독을 하면 기존에 타입선언이 없었을 때와 같이 어떠한 element도 없지만 completed 이벤트는 발생하기 때문에 다음과 같이 completed가 출력된다.<br />
<br />
다음 예문은 위와 동일하다고 볼 수 있다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">Void</span><span class="o">&gt;.</span><span class="nf">empty</span><span class="p">()</span>
    <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span>

    <span class="p">},</span>
    <span class="nv">onCompleted</span><span class="p">:</span> <span class="p">{</span>
      <span class="nf">print</span><span class="p">(</span><span class="s">"completed"</span><span class="p">)</span>
    <span class="p">})</span>

<span class="cp">#=&gt;	prints completed</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">Void</code>타입을 선언하고 <code class="language-plaintext highlighter-rouge">empty</code> operator를 사용했으므로 element는 없고 전달되는 이벤트는 없지만 <code class="language-plaintext highlighter-rouge">Observable</code>을 종료시키는 completed 이벤트는 마지막에 발생한다.<br />
<br />
그렇다면 이러한 빈 <code class="language-plaintext highlighter-rouge">Observable</code>은 어디에 사용할까?<br />
<br />
즉시 종료할 수 있는 <code class="language-plaintext highlighter-rouge">Observable</code>을 리턴하고 싶을 때, 또는 의도적으 0개의 값을 가지는 <code class="language-plaintext highlighter-rouge">Observable</code>을 리턴하고 싶을 때 사용할 수 있다.</p>

<h2 id="5-never">5. never</h2>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">Void</span><span class="o">&gt;.</span><span class="nf">never</span><span class="p">()</span>
    <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
    <span class="p">},</span> <span class="nv">onCompleted</span><span class="p">:</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"completed"</span><span class="p">)</span>
    <span class="p">})</span>

<span class="cp">#=&gt;	no prints</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">never</code>는 <code class="language-plaintext highlighter-rouge">empty</code>와 유사하지만 completed 조차 출력되지 않는다.<br />
<br />
<code class="language-plaintext highlighter-rouge">Void</code>타입까지 선언했지만 아무런 이벤트도 출력되지 않았다.<br />
<br />
그렇다면 정상적으로 작동했는지 어떻게 확인할까?<br />
<br />
바로 <code class="language-plaintext highlighter-rouge">.debug</code>를 이용해서 확인할 수 있다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">Void</span><span class="o">&gt;.</span><span class="nf">never</span><span class="p">()</span>
    <span class="o">.</span><span class="nf">debug</span><span class="p">(</span><span class="s">"never"</span><span class="p">)</span>
    <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
    <span class="p">},</span> <span class="nv">onCompleted</span><span class="p">:</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"completed"</span><span class="p">)</span>
    <span class="p">})</span>

<span class="cp">#=&gt;	prints 2022-01-19 15:23:49.348: never -&gt; subscribed</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">.debug</code>에 원하는 텍스트를 입력하고 실행하니 실행시각과 함께 구독되었다고 출력되었다.<br />
<br />
다음과 같이 <code class="language-plaintext highlighter-rouge">never</code>는 아무런 이벤트를 내보내지 않는 operator이다.</p>

<h2 id="6range">6.range</h2>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kt">Observable</span><span class="o">.</span><span class="nf">range</span><span class="p">(</span><span class="nv">start</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="mi">9</span><span class="p">)</span>
    <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"2*</span><span class="se">\(</span><span class="nv">$0</span><span class="se">)</span><span class="s">=</span><span class="se">\(</span><span class="mf">2*</span><span class="nv">$0</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">})</span>

<span class="cp">#=&gt;	prints 2*1=2</span>
<span class="cp">#=&gt;	prints 2*2=4</span>
<span class="cp">#=&gt; ...</span>
<span class="cp">#=&gt;	prints 2*8=16</span>
<span class="cp">#=&gt;	prints 2*9=18</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">range</code>는 <code class="language-plaintext highlighter-rouge">start</code>값부터 <code class="language-plaintext highlighter-rouge">count</code>값까지 1씩 늘려가면서 element를 내보낸다.</p>

<h2 id="7-마무리">7. 마무리</h2>
<p><code class="language-plaintext highlighter-rouge">Observable</code>을 생성하는 다양한 생성 operator를 알아보았다.<br />
<br />
하지만 아직 더 남은 operator도 있고, 메모리누수를 방지하기 위해 중요한 내용도 남아있어 다음 포스팅에서 더 다루기로 하겠다.</p>

<p><br /><br /><br /><br />
출처 : 30개 프로젝트로 배우는 iOS 앱 개발 with Swift 초격차 패키지 Online - part 4. Github 앱 만들기</p>
:ET