I"t:<h2 id="1-subscript란">1. Subscript란?</h2>
<p>Subscript란 class, struct, enum(collection, array 등등)에서 각 sequence의 요소에 접근하기 위한 단축키이다.<br />
<br />
Subscript를 사용하여 설정 및 검색을 위한 별도의 메서드 없이 인덱스 별로 값을 설정하고 검색할 수 있다.<br />
<br />
설명으로는 이해가 잘 안되니 예시를 통해 보도록 하자.<br />
<br />
ex)<br />
Array 인스턴스의 element를 <code class="language-plaintext highlighter-rouge">someArray[index]</code> 로 액세스<br />
Dictionary 인스턴스의 element를 <code class="language-plaintext highlighter-rouge">someDictionary[key]</code>로 액세스<br />
<br />
이때 사용하는 대괄호 []가 Subscript인 것이다.</p>

<h2 id="1-subscript-정의">1. Subscript 정의</h2>
<p>Subscript의 정의방식은 Computed Property와 비슷하다.<br />
<br />
<code class="language-plaintext highlighter-rouge">subscript</code> 키워드로 Subscript의 정의를 작성하고 인스턴스 메서드와 같은 방식으로 하나 이상의 입력 파라미터와 반환 타입을 지정한다.<br />
<br />
인스턴스 메서드와 달리, Subscript는 get-set 또는 get-only(읽기전용)일 수 있다.<br />
<br />
이러한 동작방식은 Computed Property와 같은 방식으로 getter와 setter에 의해 전달된다.<br />
<br /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">subscript</span><span class="p">(</span><span class="nv">index</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
	<span class="k">get</span> <span class="p">{</span>
	<span class="c1">// Return an appropriate subscript value here.</span>
	<span class="p">}</span>
	<span class="nf">set</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// Perform a suitable setting action here.</span>
	<span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>newValue의 타입은 Subscript의 반환 값과 동일하다.<br />
<br />
Computed Property와 마찬가지로, setter의 (newValue) 매개변수를 지정하지 않도록 선택할 수 있다.<br />
<br />
직접 변수를 설정하지 않으면 newValue라는 기본 매개 변수가 setter에게 제공된다.</p>

<h2 id="2-subscript-사용">2. Subscript 사용</h2>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">extension</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="nf">subscript</span><span class="p">(</span><span class="nv">multipleNumber</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">multipleNumber</span> <span class="o">*</span> <span class="k">self</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">multipledNumber</span> <span class="o">=</span> <span class="mi">3</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">multipledNumber</span><span class="p">)</span>

<span class="cp">#=&gt; prints 9</span></code></pre></figure>

<p>다음과 같이 Subscript를 Int의 extension에 정의해주었다.<br />
<br />
Subscript를 통해 Int타입 값을 넣어주면 원래 값과 Subscript를 통해 넣은 값을 곱해서 반환한다.<br />
<br />
물론 Computed Property와 동일하게 get-only일 경우 더욱 간단하게 선언할 수 있다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">extension</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="nf">subscript</span><span class="p">(</span><span class="nv">multipleNumber</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">multipleNumber</span> <span class="o">*</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>아래의 예시와 같이 Dictionary에서도 사용 가능하다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="nv">nameDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Curry"</span> <span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"YungSix"</span> <span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">"Neis"</span> <span class="p">:</span> <span class="mi">3</span><span class="p">]</span>

<span class="c1">// getter에 접근</span>
<span class="k">if</span> <span class="k">let</span> <span class="nv">curryValue</span> <span class="o">=</span> <span class="n">nameDictionary</span><span class="p">[</span><span class="s">"Curry"</span><span class="p">]</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">curryValue</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// setter에 접근</span>
<span class="n">nameDictionary</span><span class="p">[</span><span class="s">"Rang"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
<span class="nf">print</span><span class="p">(</span><span class="n">nameDictionary</span><span class="p">)</span>

<span class="cp">#=&gt; prints ["Rang": 4, "Neis": 3, "Curry": 1, "YungSix": 2]</span></code></pre></figure>

<h2 id="3-subscript의-옵션">3. Subscript의 옵션</h2>
<p>Subscript는 함수와 같이 하나 이상의 파라미터를 사용할 수 있다.<br />
<br />
주로 하나만 사용하긴 하지만, 필요하다면 여러개의 파라미터를 사용하면 된다.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">Matrix</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">rows</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">columns</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">var</span> <span class="nv">grid</span><span class="p">:</span> <span class="p">[</span><span class="kt">Double</span><span class="p">]</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">rows</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">columns</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">rows</span> <span class="o">=</span> <span class="n">rows</span>
        <span class="k">self</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">columns</span>
        <span class="n">grid</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">rows</span> <span class="o">*</span> <span class="n">columns</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">indexIsValid</span><span class="p">(</span><span class="nv">row</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">column</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="c1">// 인덱스니까 최대 rows, columns보다 1씩 낮아야함</span>
        <span class="k">return</span> <span class="n">row</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">rows</span> <span class="o">&amp;&amp;</span> <span class="n">column</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">column</span> <span class="o">&lt;</span> <span class="n">columns</span>
    <span class="p">}</span>

    <span class="nf">subscript</span><span class="p">(</span><span class="nv">row</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">column</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Double</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span>
            <span class="nf">assert</span><span class="p">(</span><span class="nf">indexIsValid</span><span class="p">(</span><span class="nv">row</span><span class="p">:</span> <span class="n">row</span><span class="p">,</span> <span class="nv">column</span><span class="p">:</span> <span class="n">column</span><span class="p">),</span> <span class="s">"Index out of range임!"</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">grid</span><span class="p">[(</span><span class="n">row</span> <span class="o">*</span> <span class="n">columns</span><span class="p">)</span> <span class="o">+</span> <span class="n">column</span><span class="p">]</span>
        <span class="p">}</span>

        <span class="k">set</span> <span class="p">{</span>
            <span class="nf">assert</span><span class="p">(</span><span class="nf">indexIsValid</span><span class="p">(</span><span class="nv">row</span><span class="p">:</span> <span class="n">row</span><span class="p">,</span> <span class="nv">column</span><span class="p">:</span> <span class="n">column</span><span class="p">),</span> <span class="s">"Index out of range임!"</span><span class="p">)</span>
            <span class="n">grid</span><span class="p">[(</span><span class="n">row</span> <span class="o">*</span> <span class="n">columns</span><span class="p">)</span> <span class="o">+</span> <span class="n">column</span><span class="p">]</span> <span class="o">=</span> <span class="n">newValue</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">matrix</span> <span class="o">=</span> <span class="kt">Matrix</span><span class="p">(</span><span class="nv">rows</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nv">columns</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>

<span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">matrix</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">matrix</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>

<span class="cp">#=&gt; prints Matrix(rows: 2, columns: 2, grid: [1.0, 2.0, 3.0, 4.0])</span></code></pre></figure>

<h2 id="4-type-subscript">4. Type Subscript</h2>
<p>위에서 설명한 바와 같이 인스턴스 Subscript는 특정한 타입의 인스턴스에서 호출하는 Subscript이다.<br />
<br />
하지만 타입 자체에서 호출되는 Subscript를 정의할 수도 있다.<br />
<br />
이런 종류의 Subscript는 Type Subscript라고 불린다.<br />
<br />
Subscript 앞에 <code class="language-plaintext highlighter-rouge">static</code> 키워드를 작성하여 Type Subscript를 나타낸다.<br />
<br />
클래스는 대신 <code class="language-plaintext highlighter-rouge">class</code> 키워드를 사용하여 서브클래스가 슈퍼클래스의 해당 Subscript 구현을 다시 정의할 수 있도록 만들준다.<br />
<br />
아래의 예시를 통해 Type Subscript를 정의하고 호출하는 방법을 보도록 하자.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">enum</span> <span class="kt">Planet</span><span class="p">:</span> <span class="kt">Int</span> <span class="p">{</span>
	<span class="k">case</span> <span class="n">mercury</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">venus</span><span class="p">,</span> <span class="n">earth</span><span class="p">,</span> <span class="n">mars</span><span class="p">,</span> <span class="n">jupiter</span><span class="p">,</span> <span class="n">saturn</span><span class="p">,</span> <span class="n">uranus</span><span class="p">,</span> <span class="n">neptune</span>

	<span class="kd">static</span> <span class="nf">subscript</span><span class="p">(</span><span class="nv">n</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Planet</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kt">Planet</span><span class="p">(</span><span class="nv">rawValue</span><span class="p">:</span> <span class="n">n</span><span class="p">)</span><span class="o">!</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">mars</span> <span class="o">=</span> <span class="kt">Planet</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">mars</span><span class="p">)</span>

<span class="cp">#=&gt; prints mars</span></code></pre></figure>

<p><br /><br /><br /><br />
출처 : Swift 공식문서, Subscript<br />
(<a href="https://docs.swift.org/swift-book/LanguageGuide/Subscripts.html">https://docs.swift.org/swift-book/LanguageGuide/Subscripts.html</a>)<br />
참고 : 개발자 소들이, Swift) 서브스크립트(Subscript) 정복하기<br />
(<a href="https://babbab2.tistory.com/123">https://babbab2.tistory.com/123</a>)</p>
:ET