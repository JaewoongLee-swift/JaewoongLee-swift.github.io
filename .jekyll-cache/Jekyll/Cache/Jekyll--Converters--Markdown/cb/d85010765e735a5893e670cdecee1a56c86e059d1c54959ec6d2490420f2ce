I"nR<h2 id="1-트레일링-클로저trailing-closure">1. 트레일링 클로저(Trailing Closure)</h2>
<p>트레일링 클로저란?<br /><br />
함수의 마지막 파라미터가 클로저일 때, 이를 파라미터 값 형식이 아닌 함수 뒤에 붙여 작성하는 문법. 이때, Argument Label은 생략된다.<br /><br />
어렵지만 중요한것 두가지,<br />
<strong>마지막 파라미터가 클로저! Argument Label은 생략!</strong>
<br /><br />
예제를 통해 보자..</p>

<h3 id="1-1-파라미터가-클로저-하나인-함수">1-1. 파라미터가 클로저 하나인 함수</h3>
<p>다음과 같이 클로저 하나만 파라미터로 받는 함수가 있음.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span>  <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
	<span class="nf">closure</span><span class="p">()</span>
<span class="p">}</span></code></pre></figure>

<p>이 함수를 호출하려고 하면 어떻게 해야 했느냐…</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="kt">Hello</span><span class="err">”</span><span class="p">)</span>
<span class="p">})</span></code></pre></figure>

<p>이렇게 해야했다.<br /><br /></p>

<p>다음과 같이 클로저가 파라미터의 값 형식으로 함수 호출 구문 ( ) 안에 작성되어 있는 것을 Inline Closure라 부름.</p>

<p>지금처럼 클로저를 파라미터 값 형식으로 보내는 것이 아닌, <strong>함수의 가장 마지막에 클로저를 꼬리처럼 덧붙여서</strong> 쓸 수 있음.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="kt">Hello</span><span class="err">”</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>이렇게 쓰는 것이 바로 <strong>Trailing Closure</strong><br /><br /></p>

<p>중요한 핵심 두가지<br /><br /></p>
<ol>
  <li>파라미터가 클로저 하나일 경우, 이 클로저는 첫 파라미터이자 <strong>마지막 파라미터</strong> 이므로 트레일링 클로저가 가능</li>
  <li><code class="language-plaintext highlighter-rouge">closure</code>라는 <strong>Argument Label</strong>은 트레일링 클로저에선 <strong>생략</strong>됨</li>
</ol>

<p><br />
근데 여기서 파라미터가 클로저 하나일 경우엔 더 진화해서 호출구문인 <strong>(</strong> <strong>)</strong>도 생략할 수 있음.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="n">doSomething</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="n">hello</span><span class="err">”</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<h3 id="1-2-파라미터가-여러-개인-함수">1-2. 파라미터가 여러 개인 함수</h3>
<p>다음과 같이 첫 번째 파라미터로 success라는 클로저를 받고, 두 번째 파라미터로 fail이라는 클로저를 받는 함수가 있음.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">fetchData</span><span class="p">(</span><span class="nv">success</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(),</span> <span class="nv">fail</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
	<span class="c1">//do something…</span>
<span class="p">}</span></code></pre></figure>

<p>이런 함수가 있을 때 Inline Closure의 경우…</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">fetchData</span><span class="p">(</span><span class="nv">success</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="kt">Success</span><span class="err">”</span><span class="p">)</span>
<span class="p">},</span> <span class="nv">fail</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="kt">Fail</span><span class="err">”</span><span class="p">)</span>
<span class="p">})</span></code></pre></figure>

<p>이렇게 호출할 것이다. 하지만 <strong>트레일링 클로저의 경우… 마지막 파라미터의 클로저는 함수 뒤에 붙여 쓸 수 있다!!</strong></p>

<h2 id="2-클로저의-경량문">2. 클로저의 경량문</h2>
<p>문법을 최적화 하여 클로저를 단순하게 쓸 수 있게 하는 것<br /><br />
다음과 같은 함수가 있다고 가정해보자.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nf">closure</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>이 함수는 <strong>파라미터로 받은 클로저</strong>를 실행하는데, 이때 <strong>클로저의 파라미터로 1, 2, 3</strong>이란 숫자를 넘겨주고 있음.<br /><br />
그렇다면, 실제 이 함수를 호출할 때 어떻게 했어야 했냐면,<br /><br /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="nv">a</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">b</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">c</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="k">in</span>
	<span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>
<span class="p">})</span></code></pre></figure>

<p>이렇게 클로저를 full로 작성했어야 했음! (+ Inline Closure 방식)<br /><br />
이를 경량 문법으로 간단하게 바꿔보겠음.</p>

<h3 id="2-1-파라미터-형식과-리턴-형식을-생략할-수-있다">2-1. 파라미터 형식과 리턴 형식을 생략할 수 있다</h3>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="k">in</span>
	<span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>
<span class="p">})</span></code></pre></figure>

<h3 id="2-2-parameter-name은-shortand-argument-names으로-대체하고-이-경우-parameter-name과-in-키워드를-삭제한다">2-2. Parameter Name은 Shortand Argument Names으로 대체하고, 이 경우 Parameter Name과 in 키워드를 삭제한다.</h3>

<p><strong>Shortand Argument Names</strong>란?<br />
<strong>Parameter Name 대신 사용</strong>할 수 있는것.<br /><br /></p>

<p>예를 들어, 위의 함수를 통해 보자면</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="k">in</span>
	<span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>
<span class="p">})</span></code></pre></figure>

<p>a -&gt; <strong>$0</strong>, b -&gt; <strong>$1</strong>, c -&gt; <strong>$2</strong>, in 생략 하는것임.<br /><br /></p>

<p>이런 식으로 <strong>$</strong>와 <strong>index</strong>를 이용해 <strong>Parameter에 순서대로 접근</strong>하는 것이 바로 <strong>Shortand Argument Name</strong>임.<br />
($의 개수는 Parameter의 개수만큼 있을것임!)<br /><br /></p>

<p>따라서, 경량 문법 규칙에 의해 위 구문은</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="o">+</span> <span class="nv">$2</span>
<span class="p">})</span></code></pre></figure>

<p>이렇게 간단하게 경량화가 가능!</p>

<h3 id="2-3-단일-리턴문만-남을-경우-return도-생략한다">2-3. 단일 리턴문만 남을 경우, return도 생략한다.</h3>
<p>단일 리턴문이란 것은,</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="o">+</span> <span class="nv">$2</span>
<span class="p">})</span></code></pre></figure>

<p>이렇게 <strong>클로저 내부에 코드</strong>가 <strong>return 구문 하나만 남은 경우</strong>를 말함.<br /><br />
이때는 <strong>return이란 키워드</strong>도 다음과 같이 <strong>생략</strong> 가능!!</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span>
	<span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="o">+</span> <span class="nv">$2</span>
<span class="p">})</span></code></pre></figure>

<p>만일 단일 리턴문이 아닐 경우엔, 에러발생!!</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="p">\(</span><span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="o">+</span> <span class="nv">$2</span><span class="p">)</span><span class="err">”</span><span class="p">)</span>
	<span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="o">+</span> <span class="nv">$2</span>		<span class="c1">// 에러발생…</span>
<span class="p">})</span></code></pre></figure>

<h3 id="2-4-클로저-파라미터가-마지막-파라미터면-트레일링-클로저로-작성한다">2-4. 클로저 파라미터가 마지막 파라미터면, 트레일링 클로저로 작성한다.</h3>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span>
	<span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="o">+</span> <span class="nv">$2</span>
<span class="p">})</span></code></pre></figure>

<p>우리는 트레일링 클로저를 배웠으므로 위의 함수를 바꿔보자면,</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
	<span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="o">+</span> <span class="nv">$2</span>
<span class="p">}</span></code></pre></figure>

<p>이렇게 작성이 가능함. 또한 파라미터가 하나인 경우 ( ) 도 생략 가능함!</p>

<h3 id="2-5--에-값이-아무-것도-없다면-생략한다">2-5. ( )에 값이 아무 것도 없다면 생략한다</h3>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
	<span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="o">+</span> <span class="nv">$2</span>
<span class="p">}</span></code></pre></figure>

<p><strong>이것이 최종화된 클로저의 경량 문법!!!</strong></p>

<h2 id="3-autoclosure">3. @autoclosure</h2>
<p>autoclosure란?<br />
<strong>파라미터로 전달된 일반 구문 &amp; 함수를 클로저로 래핑(Wrapping) 하는것</strong><br /><br /></p>

<p>먼저, autoclosure는 <strong>파라미터 함수 타입 정의 바로 앞</strong>에다가 붙어야함.<br /><br /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="kd">@autoclosure</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
<span class="p">}</span></code></pre></figure>

<p>이렇게 했을 경우, 이제 closure란 파라미터는 <strong>실제 클로저를 전달받지 않지만, 클로저처럼 사용이 가능!</strong><br /><br /></p>

<p>다만, 클로저와 다른 점은 실제 클로저를 전달하는 것이 아니기 때문에 파라미터로 값을 넘기는 것처럼 <strong>( )를 통해 구문을 넘겨줄 수 있음</strong></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span></code></pre></figure>

<p>이렇게!! 여기서 <code class="language-plaintext highlighter-rouge">1 &gt; 2</code>는 <strong>클로저가 아닌 일반 구문</strong>이지만, 실제 함수 내에서는</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="kd">@autoclosure</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
	<span class="nf">closure</span><span class="p">()</span>
<span class="p">}</span></code></pre></figure>

<p>이렇게 <strong>일반 구문을 클로저처럼 사용 할 수 있음!!</strong> 왜냐? <strong>클로저로 래핑</strong>한 것이니까!!! <br /><br /></p>

<p>다만 주의점은,</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="kd">@autoclosure</span> <span class="p">(</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">Bool</span><span class="p">))</span> <span class="p">{</span>	<span class="c1">// 에러발생</span>
<span class="p">}</span></code></pre></figure>

<p>autoclosure를 사용할 경우, 반드시 파라미터가 없어야함!!! 리턴타입은 상관 없음!</p>

<h3 id="3-1-autoclosure-특징--지연된-실행">3-1. autoclosure 특징 : 지연된 실행</h3>
<p>원래, 일반 구문은 작성되자마자 실행되어야 하는 것이 맞음.<br />
근데 autoclosure로 작성하면, 함수 내에서 클로저를 실행할 때 까지 구문이 실행되지 않음.<br />
왜냐? 함수가 실행될 시점에 구문을 클로저로 만들어주니까…<br /><br /></p>

<p>따라서, autoclosure의 특징은<br />
원래 바로 실행되어야 하는 구문이 지연되어 실행한다는 특징이 있음.</p>

<h2 id="4-클로저-실행하기">4. 클로저 실행하기</h2>
<p>클로저를 실행할 수 있는 방법은 두가지가 있음.</p>

<h3 id="4-1-클로저가-대입된-변수나-상수로-호출하기">4-1. 클로저가 대입된 변수나 상수로 호출하기</h3>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">closure</span> <span class="o">=</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="k">in</span>
	<span class="k">return</span> <span class="err">“</span><span class="kt">Hello</span> <span class="kt">Curry</span><span class="o">!</span><span class="err">”</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">closure</span><span class="p">())</span>

<span class="cp">#=&gt; prints Hello Curry!</span></code></pre></figure>

<p>이런 식으로 클로저가 대입된 상수 closure를 <strong>호출 구문인 ()</strong>를 이용해서 실행시킬 수 있음.</p>

<h3 id="4-2-클로저를-직접-실행하기">4-2. 클로저를 직접 실행하기</h3>
<p>클로저를 변수나 상수에 대입하지 않고 실행시키고 싶다면, (완벽한 일회성) 그땐 <strong>클로저를 ( ) 소괄호로 감싸고, 마지막에 호출 구문인 ()</strong>를 추가해주면 됨.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="p">({</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="kt">Hello</span> <span class="kt">Curry</span><span class="o">!</span><span class="err">”</span><span class="p">)</span>
<span class="p">})()</span>

<span class="cp">#=&gt; prints Hello Curry!</span></code></pre></figure>

<p>이런 식으로 클로저가 대입된 상수 closure를 <strong>호출 구문인 ()</strong>를 이용해서 실행시킬 수 있음.</p>

<h2 id="5-마무리">5. 마무리</h2>
<p>애플 디벨로퍼 아카데미에서 처음 팀으로 만난 팀원들과 공부 스터디를 하면서 클로저를 비롯한 다양한 Swift 기본 문법들을 공부하였다.<br /><br />
이전엔 코드를 따라 치기만 하고 사용하는 방법만 알았다면 지금은 코드를 보고 ‘아 이렇기 때문에 이런 코드가 작성됬구나…‘라고 생각하는데 도움이 많이 되었다.<br /><br />
하지만 아직도 부족한 부분이 많고 다시 옮겨담아야 할 포스팅도 많기 때문에 다 옮겨 적을때까지 정신 차리고 포스팅을 이어나가야겠다…(ㅠㅠ)<br /><br /></p>

<p><br /><br /><br /><br />
참고 : 개발자 소들이, Swift) 클로저(Closure) 정복하기(1/3) - 클로저, 누구냐 넌<br />
(<a href="https://babbab2.tistory.com/81?category=828998">https://babbab2.tistory.com/81?category=828998</a>)<br /></p>
:ET