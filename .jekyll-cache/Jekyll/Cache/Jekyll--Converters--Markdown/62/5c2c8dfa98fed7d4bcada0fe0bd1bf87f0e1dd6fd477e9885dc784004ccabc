I")=<h2 id="1-트레일링-클로저trailing-closure">1. 트레일링 클로저(Trailing Closure)</h2>
<p>트레일링 클로저란?<br /><br />
함수의 마지막 파라미터가 클로저일 때, 이를 파라미터 값 형식이 아닌 함수 뒤에 붙여 작성하는 문법. 이때, Argument Label은 생략된다.<br /><br />
어렵지만 중요한것 두가지,<br />
<strong>마지막 파라미터가 클로저! Argument Label은 생략!</strong>
<br /><br />
예제를 통해 보자..</p>

<h3 id="1-1-파라미터가-클로저-하나인-함수">1-1. 파라미터가 클로저 하나인 함수</h3>
<p>다음과 같이 클로저 하나만 파라미터로 받는 함수가 있음.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span>  <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
	<span class="nf">closure</span><span class="p">()</span>
<span class="p">}</span></code></pre></figure>

<p>이 함수를 호출하려고 하면 어떻게 해야 했느냐…</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="kt">Hello</span><span class="err">”</span><span class="p">)</span>
<span class="p">})</span></code></pre></figure>

<p>이렇게 해야했다.<br /><br /></p>

<p>다음과 같이 클로저가 파라미터의 값 형식으로 함수 호출 구문 ( ) 안에 작성되어 있는 것을 Inline Closure라 부름.</p>

<p>지금처럼 클로저를 파라미터 값 형식으로 보내는 것이 아닌, <strong>함수의 가장 마지막에 클로저를 꼬리처럼 덧붙여서</strong> 쓸 수 있음.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="kt">Hello</span><span class="err">”</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>이렇게 쓰는 것이 바로 <strong>Trailing Closure</strong><br /><br /></p>

<p>중요한 핵심 두가지<br /><br /></p>
<ol>
  <li>파라미터가 클로저 하나일 경우, 이 클로저는 첫 파라미터이자 <strong>마지막 파라미터</strong> 이므로 트레일링 클로저가 가능</li>
  <li><code class="language-plaintext highlighter-rouge">closure</code>라는 <strong>Argument Label</strong>은 트레일링 클로저에선 <strong>생략</strong>됨
<br /><br /></li>
</ol>

<p>근데 여기서 파라미터가 클로저 하나일 경우엔 더 진화해서 호출구문인 <strong>(</strong> <strong>)</strong>도 생략할 수 있음.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="n">doSomething</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="n">hello</span><span class="err">”</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<h3 id="1-2-파라미터가-여러-개인-함수">1-2. 파라미터가 여러 개인 함수</h3>
<p>다음과 같이 첫 번째 파라미터로 success라는 클로저를 받고, 두 번째 파라미터로 fail이라는 클로저를 받는 함수가 있음.</p>

<h2 id="2-클로저-표현식">2. 클로저 표현식</h2>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift">  <span class="p">{</span> <span class="p">(</span><span class="kt">Parameters</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">ReturnType</span> <span class="k">in</span>
    <span class="c1">//실행구문</span>
  <span class="p">}</span></code></pre></figure>

<p>클로저는 Unnamed function인 만큼, <code class="language-plaintext highlighter-rouge">func</code> 이란 키워드를 사용하지 않음.<br /><br />
그리고 클로저는 다음과 같이 <strong>클로저 헤드</strong>와 <strong>클로저 바디</strong>로 이루어져 있음.<br /><br />
이 둘을 구분지어주는게 바로 <code class="language-plaintext highlighter-rouge">in</code> 키워드</p>

<p><br />
<img width="507" alt="스크린샷 2022-09-13 오후 9 44 21" src="https://user-images.githubusercontent.com/83946704/189904410-f20bdfa0-12e1-41af-9011-2112d4a1b455.png" /></p>

<h3 id="2-1-parameter와-return-type이-둘-다-없는-클로저">2-1. Parameter와 Return Type이 둘 다 없는 클로저</h3>
<p>클로저는 함수이고 함수는 Swift에서 일급 객체이기 때문에, 상수에 클로저를 대입할 수 있음.<br /><br />
특히 <strong>Parameter</strong>와 <strong>Return Type</strong>이 둘 다 없는 경우는 다음과 같이 사용함.<br /><br /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">closure</span> <span class="o">=</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="kt">Closure</span><span class="err">”</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>클로저 또한 함수처럼 <strong>Return Type이 없으면 생략 가능!</strong> 심지어 <strong>Return Type이 있더라도 생략 가능!</strong><br /><br />
함수에서는 안되는 <strong>Parameter조차 생략 가능!!!</strong></p>

<h3 id="2-2-parameter와-return-type이-있는-클로저">2-2. Parameter와 Return Type이 있는 클로저</h3>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">closure</span> <span class="o">=</span> <span class="p">{</span> <span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="k">in</span>
	<span class="k">return</span> <span class="err">“</span><span class="kt">Hello</span><span class="p">,</span> <span class="p">\(</span><span class="n">name</span><span class="p">)</span><span class="err">”</span>
<span class="p">}</span></code></pre></figure>

<p>함수와 비슷해 보여 어렵지 않지만 주의해야할 것 하나!<br /><br />
<u>Parameter의 name은 단독으로 쓰였으니, Argument Label이자 Parameter Name이라 생각…은 안된다!!</u><br /><br />
<strong>클로저에선 Argument Label을 사용하지 않음</strong>
<br /><br />
따라서 <code class="language-plaintext highlighter-rouge">name</code>은 <strong>Argument Label이 아니고 오직 Parameter Name!</strong>
<br /><br /></p>

<h2 id="3-1급-객체로서-클로저">3. 1급 객체로서 클로저</h2>
<p>1급 객체 함수의 특징을 클로저에 대입시켜보자.<br /><br /></p>

<p><strong>(1) 클로저를 변수나 상수에 대입할 수 있다.</strong><br /><br />
클로저 또한 변수나 상수에 대입 할 수 있고, 이 대입된 변수나 상수로 실행할 수도 있음.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">closure</span> <span class="o">=</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="kt">Closure</span><span class="err">”</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">closure2</span> <span class="o">=</span> <span class="n">closure</span></code></pre></figure>

<p>이런식으로 <strong>대입과 동시에 클로저를 작성</strong>할 수도 있고, 기존에 클로저를 대입한 변수나 상수를 새로운 변수나 상수에 대입할 수도 있음!<br /><br /></p>

<p><strong>(2) 함수의 파라미터 타입으로 클로저를 전달할 수 있다.</strong><br /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
	<span class="nf">closure</span><span class="p">()</span>
<span class="p">}</span></code></pre></figure>

<p>함수를 파라미터로 전달받는 doSomething이라는 함수가 있음. 이 경우, 파라미터로 함수를 넘겨줘도 되지만</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">doSomething</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="kt">Hello</span><span class="o">!</span><span class="err">”</span><span class="p">)</span>
<span class="p">})</span>

<span class="cp">#=&gt; Hello!</span></code></pre></figure>

<p>이렇게 <strong>클로저</strong>를 넘겨줘도 됨!<br /><br />
헷갈릴 수 있는데 함수 호출을 다음과 같이 생각해보면 됨<br /><br />
<img width="498" alt="스크린샷 2022-07-11 오전 4 52 05" src="https://user-images.githubusercontent.com/83946704/189906984-c432fb26-6e0a-4fec-9be2-ce5450ec0bd4.png" /><br /><br />
초록색 영역이 클로저로 작성된 부분이고, 이것이 <code class="language-plaintext highlighter-rouge">closure</code>란 Argument Label의 <strong>Parameter로 전달</strong>된 것임!!
<br /><br /></p>

<p><strong>(3) 함수의 반환 타입으로 클로저를 사용할 수 있다.</strong><br /><br />
선언부는 기존 함수와 똑같음.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="p">{</span>
<span class="p">}</span></code></pre></figure>

<p><br />
그러나 <strong>실제 값을 return할 때 함수가 아닌</strong>
<br /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
		<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="kt">Hello</span> <span class="kt">Curry</span><span class="o">!</span><span class="err">”</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><br />
이렇게 <strong>클로저를 리턴</strong>할 수 있음
<br /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">closure</span> <span class="o">=</span> <span class="nf">doSomething</span><span class="p">()</span>
<span class="nf">closure</span><span class="p">()</span>
<span class="c1">//이렇게도 가능 ㅋㅋ</span>
<span class="nf">doSomething</span><span class="p">()()</span>

<span class="cp">#=&gt; prints Hello Curry!</span></code></pre></figure>

<p><br />
또한 호출하는 곳에서 클로저를 받아서 다음과 같이 실행시킬 수 있음.
<br /></p>

<h2 id="4-클로저-실행하기">4. 클로저 실행하기</h2>
<p>클로저를 실행할 수 있는 방법은 두가지가 있음.</p>

<h3 id="4-1-클로저가-대입된-변수나-상수로-호출하기">4-1. 클로저가 대입된 변수나 상수로 호출하기</h3>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">closure</span> <span class="o">=</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="k">in</span>
	<span class="k">return</span> <span class="err">“</span><span class="kt">Hello</span> <span class="kt">Curry</span><span class="o">!</span><span class="err">”</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">closure</span><span class="p">())</span>

<span class="cp">#=&gt; prints Hello Curry!</span></code></pre></figure>

<p>이런 식으로 클로저가 대입된 상수 closure를 <strong>호출 구문인 ()</strong>를 이용해서 실행시킬 수 있음.</p>

<h3 id="4-2-클로저를-직접-실행하기">4-2. 클로저를 직접 실행하기</h3>
<p>클로저를 변수나 상수에 대입하지 않고 실행시키고 싶다면, (완벽한 일회성) 그땐 <strong>클로저를 ( ) 소괄호로 감싸고, 마지막에 호출 구문인 ()</strong>를 추가해주면 됨.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="p">({</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="kt">Hello</span> <span class="kt">Curry</span><span class="o">!</span><span class="err">”</span><span class="p">)</span>
<span class="p">})()</span>

<span class="cp">#=&gt; prints Hello Curry!</span></code></pre></figure>

<p>이런 식으로 클로저가 대입된 상수 closure를 <strong>호출 구문인 ()</strong>를 이용해서 실행시킬 수 있음.</p>

<h2 id="5-마무리">5. 마무리</h2>
<p>애플 디벨로퍼 아카데미에서 처음 팀으로 만난 팀원들과 공부 스터디를 하면서 클로저를 비롯한 다양한 Swift 기본 문법들을 공부하였다.<br /><br />
이전엔 코드를 따라 치기만 하고 사용하는 방법만 알았다면 지금은 코드를 보고 ‘아 이렇기 때문에 이런 코드가 작성됬구나…‘라고 생각하는데 도움이 많이 되었다.<br /><br />
하지만 아직도 부족한 부분이 많고 다시 옮겨담아야 할 포스팅도 많기 때문에 다 옮겨 적을때까지 정신 차리고 포스팅을 이어나가야겠다…(ㅠㅠ)<br /><br /></p>

<p><br /><br /><br /><br />
참고 : 개발자 소들이, Swift) 클로저(Closure) 정복하기(1/3) - 클로저, 누구냐 넌<br />
(<a href="https://babbab2.tistory.com/81?category=828998">https://babbab2.tistory.com/81?category=828998</a>)<br /></p>
:ET