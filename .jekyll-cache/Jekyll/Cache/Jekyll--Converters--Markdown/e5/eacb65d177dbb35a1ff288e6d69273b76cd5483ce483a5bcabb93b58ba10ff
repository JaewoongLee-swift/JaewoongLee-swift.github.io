I"=<h2 id="1-reactive-x">1. Reactive X</h2>

<p>RxSwift를 배우기 위해 Rx, ReactiveX가 무엇인지 알고 지나가자.<br />
<br /></p>
<ul>
  <li>Reactive X란?
    <blockquote>
      <p>프로그래밍에서 데이터가 동기식이든, 비동기식이든 상관없이 명령형 프로그래밍 언어가 데이터 요소들에서 작동할 수 있도록 하는 도구.<br />
(위키백과 - ReactiveX)</p>
    </blockquote>
  </li>
</ul>

<p><br />
흠… 어렵다. 이해를 쉽게 하기위해 다른 블로그에서의 정리글을 옮겨보자면,</p>
<blockquote>
  <p>ReactiveX는 비동기에 대한 스트림(결과)를 관찰하고 그것에 반응해서 무언가를 할 수 있는 프로그래밍 패러다임</p>
</blockquote>

<p>(출처 : <a href="https://magi82.github.io/ios-rxswift-01/">https://magi82.github.io/ios-rxswift-01/</a>)</p>

<p>좀 더 이해를 쉽게 해보자면….<br />
<br />
비동기의 예로 서버통신에 ReactiveX를 사용한다면, 통신결과가 언제 나올지 관찰하고 통신결과에 반응해서 어떠한 행동을 할 수 있게 만들어주는 것이라 생각하면 되겠다.</p>

<h2 id="2-rxswift">2. RxSwift</h2>
<p>ReactiveX를 알았으니, RxSwift는 Swift언어에 ReactiveX를 입혔다는 것을 알 수 있다.<br />
<br />
조금 더 정확이 알아보자면,<br />
RxSwift는 기본적으로 비동기적으로 움직이는 애플의 api들과 수시로 상태가 변하는 환경에서 보다 직관적이고 효율적인 코드를 작성할 수 있게 도와준다.<br />
<br />
RxSwift를 사용하기 위해선 구성 요소를 알아야하는데 아래엔 다음 3가지를 설명하겠다.</p>
<ul>
  <li>Observable</li>
  <li>Operator</li>
  <li>Scheduler</li>
</ul>

<h3 id="2-1-observable">2-1. Observable</h3>
<p><code class="language-plaintext highlighter-rouge">Observable&lt;T&gt;</code>란?<br /></p>

<ol>
  <li>제너럴타입의 객체로, <code class="language-plaintext highlighter-rouge">T</code>형태의 데이터 snapshot을 전달 할 수 있는 일련의 이벤트를 비동기적으로 생성하는 기능을 가진다.</li>
  <li>하나 이상의 <code class="language-plaintext highlighter-rouge">observers</code>가 실시간으로 어떤 이벤트에 반응한다.</li>
  <li>세 가지 유형의 이벤트만 방출한다.</li>
</ol>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">enum</span> <span class="kt">Event</span><span class="o">&lt;</span><span class="kt">Element</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">case</span> <span class="nf">next</span><span class="p">(</span><span class="kt">Element</span><span class="p">)</span>      <span class="c1">// Observable의 어떠한 다음 요소</span>
  <span class="k">case</span> <span class="nf">error</span><span class="p">(</span><span class="kt">Swift</span><span class="o">.</span><span class="n">error</span><span class="p">)</span> <span class="c1">// 에러 이벤트</span>
  <span class="k">case</span> <span class="n">completed</span>          <span class="c1">// 최종완료 이벤트</span>
<span class="p">}</span></code></pre></figure>

<p><br />
<code class="language-plaintext highlighter-rouge">observer</code>와 <code class="language-plaintext highlighter-rouge">Observable</code>만 있을 뿐, 다른 <code class="language-plaintext highlighter-rouge">delegate protocal</code>을 이용하거나 <code class="language-plaintext highlighter-rouge">class</code>간 통신을 위해 클로저를 사용할 필요가 없다.<br />
<br />
어느곳에서든 <code class="language-plaintext highlighter-rouge">Observable</code>을 선언하고 <code class="language-plaintext highlighter-rouge">Observable</code>을 수신할 수 있는 <code class="language-plaintext highlighter-rouge">observer</code>만 있다면 이벤트를 서로 수신할 수 있다.<br /></p>

<h3 id="2-2-operator">2-2. Operator</h3>
<p><code class="language-plaintext highlighter-rouge">Operator</code>란?<br />
수식과 같이 일정한 기능을 수행하면서 <code class="language-plaintext highlighter-rouge">Observable</code>에서 방출한 값을 기능에 맞춰 순서를 맞추고 조합해서 사용하는 것.<br />
<br /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="c1">//예시: 가로, 세로 화면전환의 경우</span>
<span class="kt">UIDevice</span><span class="o">.</span><span class="n">rx</span><span class="o">.</span><span class="n">orientation</span>
  <span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">value</span> <span class="k">in</span>
      <span class="k">return</span> <span class="n">value</span> <span class="o">!=</span> <span class="o">.</span><span class="n">landscape</span>
  <span class="p">}</span>
  <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span>
      <span class="k">return</span> <span class="s">"세로로만 보겠습니다!"</span>
  <span class="p">}</span>
  <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="n">string</span> <span class="k">in</span>
      <span class="nf">showAlert</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
  <span class="p">})</span></code></pre></figure>

<p><br />
코드를 통해 예시를 보자면,<br />
<code class="language-plaintext highlighter-rouge">UIDeive.rx.orientation</code>이 <code class="language-plaintext highlighter-rouge">Observable&lt;Orientation&gt;</code>타입을 가지는 하나의 <code class="language-plaintext highlighter-rouge">Observable</code>이다.<br />
<br />
하나의 <code class="language-plaintext highlighter-rouge">Observable</code>을 <code class="language-plaintext highlighter-rouge">filter</code>, <code class="language-plaintext highlighter-rouge">map</code>, <code class="language-plaintext highlighter-rouge">subscribe</code>와 같은 연산자들이 각각의 결과값을 조합하고 계산한 다음 결과를 내뱉는 것.<br /></p>

<h2 id="2-3-scheduler">2-3 Scheduler</h2>
<p><code class="language-plaintext highlighter-rouge">Scheduler</code>란?<br />
RxSwift에서 dispatchQueue와 동일한 것으로 더욱 강력하고 사용하기 쉽다.<br />
<br />
여태 GCD를 이용해 <code class="language-plaintext highlighter-rouge">dispatchQueue</code>를 이용했다면, <code class="language-plaintext highlighter-rouge">Scheduler</code>는 Main Scheduler, Background Scheduler로 나뉘어서 사용됨.</p>

<p><br /><br /><br /><br />
출처 : 30개 프로젝트로 배우는 iOS 앱 개발 with Swift 초격차 패키지 Online - part 4. 인스타그램 앱 만들기</p>
:ET